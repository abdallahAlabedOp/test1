import jsonWebToken from 'jsonwebtoken';

const UNAUTHORIZED = 401;
const DISABLED = 'disabled';
const ADMIN = 'admin';

export const validateToken = secret => async (req, res, next) => {
  const authHeader = req.headers['authorization'];
  if (!authHeader) return res.sendStatus(UNAUTHORIZED);
  const token = authHeader && authHeader.split(' ')[1];
  if (token == null) return res.sendStatus(UNAUTHORIZED);

  try {
    req.user = await jsonWebToken.verify(token, secret);
    if (req.user && req.user.status === DISABLED) return res.sendStatus(UNAUTHORIZED);
  } catch {
    return res.sendStatus(UNAUTHORIZED);
  }
  next();
};

export const isAuthorized = routPermissions => async (req, res, next) => {
  if (!req.user) return res.sendStatus(UNAUTHORIZED);
  if (req.user.status === DISABLED) return res.sendStatus(UNAUTHORIZED);
  if (req.user.type !== ADMIN && req.user.parentId !== null) {
    const result = routPermissions.every(val => req.user.permissions.includes(val));
    if (!result) return res.sendStatus(UNAUTHORIZED);
  }
  next();
};
