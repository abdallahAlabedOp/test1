import chai from 'chai';
import { CalculationsHelper } from '../../src/helpers';

const should = chai.should();

describe('CalculationsHelper', () => {
  describe('ctr', () => {
    it('should return null when clicks and impressions is not provided', () => {
      const result = CalculationsHelper.ctr();
      should.equal(result, null);
    });
    it('should return null when clicks is not provided', () => {
      const result = CalculationsHelper.ctr(1000);
      should.equal(result, null);
    });
    it('should return null when clicks is undefined', () => {
      const result = CalculationsHelper.ctr(undefined, 100);
      should.equal(result, null);
    });
    it('should return null when clicks is null', () => {
      const result = CalculationsHelper.ctr(null, 100);
      should.equal(result, null);
    });
    it('should return null when clicks is not valid', () => {
      const result = CalculationsHelper.ctr('asd', 100);
      should.equal(result, null);
    });
    it('should return null when clicks is not valid', () => {
      const result = CalculationsHelper.ctr(1000, 'asd');
      should.equal(result, null);
    });
    it('should return result when clicks and impressions are string numbers', () => {
      const result = CalculationsHelper.ctr('1000', '100');
      result.should.be.an('number');
      result.should.equal(1000);
    });
    it('should return result when clicks and impressions are numbers', () => {
      const result = CalculationsHelper.ctr(1000, 100);
      result.should.be.an('number');
      result.should.equal(1000);
    });
    it('should return 0 when impressions is 0', () => {
      const result = CalculationsHelper.ctr(1000, 0);
      result.should.be.an('number');
      result.should.equal(0);
    });
  });
});
