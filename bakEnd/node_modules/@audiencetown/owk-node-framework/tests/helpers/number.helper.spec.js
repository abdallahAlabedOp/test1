import chai from 'chai';
import { NumberHelpers } from '../../src/helpers';

const should = chai.should();

describe('NumberHelpers', () => {
  describe('areNumbers', () => {
    it('should return false when no args', () => {
      const result = NumberHelpers.areNumbers();
      result.should.be.false;
    });
    it('should return false when pass 1 string value', () => {
      const result = NumberHelpers.areNumbers('asd');
      result.should.be.false;
    });
    it('should return false when pass undefined value', () => {
      const result = NumberHelpers.areNumbers(undefined);
      result.should.be.false;
    });
    it('should return false when pass null value', () => {
      const result = NumberHelpers.areNumbers(null);
      result.should.be.false;
    });
    it('should return true when pass 1 number as string value', () => {
      const result = NumberHelpers.areNumbers('1');
      result.should.be.true;
    });
    it('should return true when pass 1 number value', () => {
      const result = NumberHelpers.areNumbers(1);
      result.should.be.true;
    });
    it('should return true when pass 1 double value', () => {
      const result = NumberHelpers.areNumbers(1.9);
      result.should.be.true;
    });
    it('should return false when pass 2 values, 1 is not number', () => {
      const result = NumberHelpers.areNumbers(1.9, 'asd');
      result.should.be.false;
    });
    it('should return true when pass 2 values, 1 is number as string', () => {
      const result = NumberHelpers.areNumbers(1.9, '0.9');
      result.should.be.true;
    });
    it('should return true when pass 2 numeric values', () => {
      const result = NumberHelpers.areNumbers(1.9, 0.98);
      result.should.be.true;
    });
  });

  describe('divide', () => {
    it('should return null when numerator and denominator are undefined', () => {
      should.equal(NumberHelpers.divide(), null);
    });
    it('should return null when numerator and denominator are null', () => {
      should.equal(NumberHelpers.divide(null, null), null);
    });
    it('should return null when numerator is undefined', () => {
      should.equal(NumberHelpers.divide(undefined, 1), null);
    });
    it('should return null when numerator is null', () => {
      should.equal(NumberHelpers.divide(null, 1), null);
    });
    it('should return null when numerator is string', () => {
      should.equal(NumberHelpers.divide('abc', 1), null);
    });
    it('should return null when denominator is undefined', () => {
      should.equal(NumberHelpers.divide(1, undefined), null);
    });
    it('should return null when denominator is null', () => {
      should.equal(NumberHelpers.divide(1, null), null);
    });
    it('should return null when denominator is string', () => {
      should.equal(NumberHelpers.divide(1, 'abc'), null);
    });
    it('should return 0 when denominator is 0', () => {
      const result = NumberHelpers.divide(1, 0);
      result.should.be.a('number');
      result.should.equal(0);
    });
    it('should return value when numerator and denominator are valid numeric strings', () => {
      const result = NumberHelpers.divide('10', '5');
      result.should.be.a('number');
      result.should.equal(2);
    });
    it('should return value when numerator and denominator are numeric', () => {
      const result = NumberHelpers.divide(10, 5);
      result.should.be.a('number');
      result.should.equal(2);
    });
  });
});
