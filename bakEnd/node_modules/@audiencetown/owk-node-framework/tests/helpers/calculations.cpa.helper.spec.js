import chai from 'chai';
import { CalculationsHelper } from '../../src/helpers';

const should = chai.should();

describe('CalculationsHelper', () => {
  describe('cpa', () => {
    it('should return null when spend and conversions is not provided', () => {
      const result = CalculationsHelper.cpa();
      should.equal(result, null);
    });
    it('should return null when conversions is not provided', () => {
      const result = CalculationsHelper.cpa(1000);
      should.equal(result, null);
    });
    it('should return null when spend is undefined', () => {
      const result = CalculationsHelper.cpa(undefined, 1000);
      should.equal(result, null);
    });
    it('should return null when spend is null', () => {
      const result = CalculationsHelper.cpa(null, 1000);
      should.equal(result, null);
    });
    it('should return null when spend is not valid', () => {
      const result = CalculationsHelper.cpa('asd', 100);
      should.equal(result, null);
    });
    it('should return null when conversions is not valid', () => {
      const result = CalculationsHelper.cpa(1000, 'asd');
      should.equal(result, null);
    });
    it('should return result when spend and conversions are string numbers', () => {
      const result = CalculationsHelper.cpa('1000', '100');
      result.should.be.an('number');
      result.should.equal(10);
    });
    it('should return result when spend and conversions are numbers', () => {
      const result = CalculationsHelper.cpa(1000, 100);
      result.should.be.an('number');
      result.should.equal(10);
    });
    it('should return 0 when conversions is 0', () => {
      const result = CalculationsHelper.cpa(1000, 0);
      result.should.be.an('number');
      result.should.equal(0);
    });
  });
});
